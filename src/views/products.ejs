<%- include('includes/header') %>

<link rel="stylesheet" type="text/css" href="/css/products.css" />

<body>
  <div class="products-container">
    <div class="navigation-menu">
      <ul class="nav justify-content-center">
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link active" href="/admin/">Home</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/product/all">Menu</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/user/all">Users</a>
        </li>
        <li
          class="nav-item"
          style="cursor: pointer"
          onclick="return confirm('Do you want to logout?')"
        >
          <a class="nav-link" href="/admin/logout">Logout</a>
        </li>
      </ul>
    </div>

    <div class="restaurant-menu-frame">
      <div class="board">
        <div class="dishes-table">
          <span class="new-dish-txt" style="margin-bottom: 30px">
            RESTAURANT MENU
          </span>
          <table class="table table-bordered table-hover">
            <thead class="thead-light">
              <tr class="thead-light">
                <th scope="col">T/r</th>
                <th scope="col">Product Name</th>
                <th scope="col">Product Type</th>
                <th scope="col">Product Volume</th>
                <th scope="col">Product Price</th>
                <th scope="col">Product Left Count</th>
                <th scope="col">Status</th>
              </tr>
            </thead>
            <!--  LOOP PRODUCTS: START  -->
              <% products.map(function(value, key){ %>
                <tbody style="background: white">
                  <td><%= key + 1 %></td>
                  <td><%= value.productName %></td> 
                  <td><%= value.productCollection %></td>
                  <td><%= value.productCollection === "DRINK" ? value.productVolume : value.productSize %></td>
                  <td><%= value.productPrice %></td>
                  <td><%= value.productLeftCount %></td>
                  <td>
                    <select class="spec-select new-product-status" id="<%= value._id%>">
                      <option value="PAUSE" <%= value.productStatus === 'PAUSE' ? "selected" : ''%>>PAUSE</option>
                      <option value="PROCESS" <%= value.productStatus === 'PROCESS' ? "selected" : ''%>>PROCESS</option>
                      <option value="DELETE" <%= value.productStatus === 'DELETE' ? "selected" : ''%>>DELETE</option>
                    </select>
                  </td>
                </tbody>
              <%}) %>
            <!--  LOOP PRODUCTS: END  -->
          </table>
          <!-- Pagination will be inserted here by JavaScript -->
          
          <div
            class="long-input"
            style="align-items: flex-end; margin-bottom: 25px"
          >
            <button class="btn btn-primary" id="process-btn">
              New Product
            </button>
          </div>
        </div>

        <form
          onsubmit="return validateForm()"
          action="/admin/product/create"
          method="POST"
          class="dish-container"
          enctype="multipart/form-data"
        >
          <div class="long-input" style="display: flex; align-items: center">
            <span class="new-dish-txt">NEW PRODUCT DETAIL</span>
          </div>
          <div class="login-input-frame">
            <div class="long-input">
              <label>Product Name</label>
              <input
                type="text"
                placeholder="Name"
                name="productName"
                class="product-name"
              />
            </div>
            <input
              name="productStatus"
              value="PAUSE"
              class="product-status"
              hidden
            />
          </div>
          <div class="half-input-frame">
            <div class="half-input">
              <label>Product Price</label>
              <input
                type="number"
                placeholder="Price"
                name="productPrice"
                class="product-price"
              />
            </div>
            <div class="half-input">
              <label>Product Left Counts</label>
              <input
                type="number"
                placeholder="Counts"
                name="productLeftCount"
                class="product-left-count"
              />
            </div>
          </div>
          <div class="half-input-frame">
            <div class="half-input">
              <label>Product Type</label>
              <select class="product-collection" name="productCollection">
                <option value="DISH" selected>Dish</option>
                <option value="SALAD">Salad</option>
                <option value="DESSERT">Dessert</option>
                <option value="DRINK">Drink</option>
                <option value="OTHER">Other</option>
              </select>
            </div>

            <div class="half-input" id="product-collection">
              <label>Dish Volume</label>
              <select class="product-size" name="productSize">
                <option value="SMALL">Small</option>
                <option value="NORMAL" selected>Normal</option>
                <option value="LARGE">Large</option>
                <option value="SET">Set</option>
              </select>
            </div>

            <div class="half-input" id="product-volume" style="display: none">
              <label>Drink Volume</label>
              <select class="product-volume" name="productVolume">
                <option value="0.5">0,5 liters</option>
                <option value="1" selected>1 liters</option>
                <option value="1.2">1,2 liters</option>
                <option value="1.5">1,5 liters</option>
                <option value="2">2 liters</option>
              </select>
            </div>
          </div>
          <div class="long-input">
            <label>Product Description</label>
            <textarea name="productDesc" class="product-desc"></textarea>
          </div>

          <div class="img-frame">
            <label>Product Images</label>
            <div class="media-frame">
              <div class="upload-img-box">
                <img src="/img/upload.svg" class="1" id="image-section-1" />
                <input
                  type="file"
                  id="file"
                  name="productImages"
                  class="image-one"
                  required
                  onchange="previewFileHandler(this, 1)"
                />
              </div>
              <div class="upload-img-box">
                <img src="/img/upload.svg" class="2" id="image-section-2" />
                <input
                  type="file"
                  id="file"
                  name="productImages"
                  class="image-two"
                  onchange="previewFileHandler(this, 2)"
                />
              </div>
              <div class="upload-img-box">
                <img src="/img/upload.svg" class="3" id="image-section-3" />
                <input
                  type="file"
                  id="file"
                  name="productImages"
                  class="image-three"
                  onchange="previewFileHandler(this, 3)"
                />
              </div>
              <div class="upload-img-box">
                <img src="/img/upload.svg" class="4" id="image-section-4" />
                <input
                  type="file"
                  id="file"
                  name="productImages"
                  class="image-four"
                  onchange="previewFileHandler(this, 4)"
                />
              </div>
              <div class="upload-img-box">
                <img src="/img/upload.svg" class="5" id="image-section-5" />
                <input
                  type="file"
                  id="file"
                  name="productImages"
                  class="image-five"
                  onchange="previewFileHandler(this, 5)"
                />
              </div>
              <input name="restaurantIid" class="restaurant-id" hidden />
            </div>
          </div>

          <div class="operation-buttons">
            <button class="btn btn-danger" id="cancel-btn">Cancel</button>
            <button type="submit" class="btn btn-primary" id="create-btn">
              Create
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script type="text/javascript" src="/js/products.js"></script>
  
  <!-- Add the pagination JavaScript code inline or in a separate file -->
  <script>
    // Pagination configuration
    const ITEMS_PER_PAGE = 10; // Number of products per page
    let currentPage = 1;
    let totalPages = 1;

    document.addEventListener('DOMContentLoaded', function() {
      // Get all product rows and calculate total pages
      const productRows = document.querySelectorAll('.table tbody');
      totalPages = Math.ceil(productRows.length / ITEMS_PER_PAGE);
      
      // Create pagination controls
      createPaginationControls();
      
      // Show the first page by default
      showPage(currentPage);
    });

    // Function to create pagination controls
    function createPaginationControls() {
      // Create pagination container
      const paginationContainer = document.createElement('div');
      paginationContainer.className = 'pagination-container';
      paginationContainer.style.display = 'flex';
      paginationContainer.style.justifyContent = 'center';
      paginationContainer.style.margin = '20px 0';
      
      // Create previous button
      const prevButton = document.createElement('button');
      prevButton.className = 'btn btn-outline-primary pagination-btn';
      prevButton.innerHTML = 'Previous';
      prevButton.style.marginRight = '10px';
      prevButton.addEventListener('click', function() {
        if (currentPage > 1) {
          showPage(currentPage - 1);
        }
      });
      
      // Create page number buttons container
      const pageNumbersContainer = document.createElement('div');
      pageNumbersContainer.className = 'page-numbers';
      pageNumbersContainer.style.display = 'flex';
      
      // Create page number buttons
      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = 'btn btn-outline-primary page-btn';
        pageButton.innerHTML = i;
        pageButton.dataset.page = i;
        pageButton.style.margin = '0 5px';
        pageButton.addEventListener('click', function() {
          showPage(parseInt(this.dataset.page));
        });
        pageNumbersContainer.appendChild(pageButton);
      }
      
      // Create next button
      const nextButton = document.createElement('button');
      nextButton.className = 'btn btn-outline-primary pagination-btn';
      nextButton.innerHTML = 'Next';
      nextButton.style.marginLeft = '10px';
      nextButton.addEventListener('click', function() {
        if (currentPage < totalPages) {
          showPage(currentPage + 1);
        }
      });
      
      // Add all elements to pagination container
      paginationContainer.appendChild(prevButton);
      paginationContainer.appendChild(pageNumbersContainer);
      paginationContainer.appendChild(nextButton);
      
      // Add pagination container after the table
      const table = document.querySelector('.table');
      table.parentNode.insertBefore(paginationContainer, table.nextSibling);
    }

    // Function to show a specific page
    function showPage(pageNumber) {
      // Update current page
      currentPage = pageNumber;
      
      // Get all product rows
      const productRows = document.querySelectorAll('.table tbody');
      
      // Hide all rows
      productRows.forEach(row => {
        row.style.display = 'none';
      });
      
      // Calculate start and end index for current page
      const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
      const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, productRows.length);
      
      // Show rows for current page
      for (let i = startIndex; i < endIndex; i++) {
        productRows[i].style.display = 'table-row-group';
      }
      
      // Update active state of page buttons
      const pageButtons = document.querySelectorAll('.page-btn');
      pageButtons.forEach(button => {
        if (parseInt(button.dataset.page) === currentPage) {
          button.classList.remove('btn-outline-primary');
          button.classList.add('btn-primary');
        } else {
          button.classList.remove('btn-primary');
          button.classList.add('btn-outline-primary');
        }
      });
      
      // Update state of prev/next buttons
      const prevButton = document.querySelector('.pagination-btn:first-child');
      const nextButton = document.querySelector('.pagination-btn:last-child');
      
      prevButton.disabled = currentPage === 1;
      nextButton.disabled = currentPage === totalPages;
    }

    // Add a function to handle status changes with pagination
    document.addEventListener('DOMContentLoaded', function() {
      const processBtnEl = document.querySelector('#process-btn');
      if (processBtnEl) {
        const oldStatusChangeHandler = processBtnEl.onclick;
        processBtnEl.onclick = function() {
          // Store the current page before showing the form
          localStorage.setItem('currentProductPage', currentPage);
          
          // Call the original handler
          if (oldStatusChangeHandler) {
            oldStatusChangeHandler();
          }
        };
      }
    });

    // Restore pagination state after form submission
    window.onload = function() {
      const savedPage = localStorage.getItem('currentProductPage');
      if (savedPage) {
        currentPage = parseInt(savedPage);
        localStorage.removeItem('currentProductPage');
        
        // Need to wait for DOM to be ready before applying saved page
        setTimeout(() => {
          if (typeof showPage === 'function') {
            showPage(currentPage);
          }
        }, 100);
      }
    };
  </script>
  
  <style>
    /* Pagination styles */
    .pagination-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 20px 0;
    }

    .pagination-btn {
      padding: 6px 12px;
      margin: 0 5px;
      cursor: pointer;
    }

    .pagination-btn:disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }

    .page-btn {
      width: 40px;
      height: 40px;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .page-btn.btn-primary {
      color: white;
    }

    /* Responsive styles */
    @media screen and (max-width: 768px) {
      .page-numbers {
        display: none; /* Hide page numbers on mobile */
      }
      
      .pagination-container {
        justify-content: space-between;
      }
      
      .pagination-btn {
        margin: 0;
      }
    }
  </style>
</body>

<%- include('includes/footer') %>