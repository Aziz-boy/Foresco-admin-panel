<%- include('includes/header') %>

<link rel="stylesheet" type="text/css" href="/css/users.css" />

<body>
  <div class="users-container">
    <% if(!member) { %>
    <div class="navigation-menu">
      <ul class="nav justify-content-center">
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link active" href="/admin/">Home</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/signup">SignUp</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/login">Login</a>
        </li>
      </ul>
    </div>

    <div class="users-frame" style="color: #dddddd">
      <div class="board" style="font-size: 40px">Please login first!</div>
    </div>

    <% } else { %>
    <div class="navigation-menu">
      <ul class="nav justify-content-center">
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link active" href="/admin/">Home</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/product/all">Menu</a>
        </li>
        <li class="nav-item" style="cursor: pointer">
          <a class="nav-link" href="/admin/user/all">Users</a>
        </li>
        <li
          class="nav-item"
          style="cursor: pointer"
          onclick="return confirm('Do you really want to logout?')"
        >
          <a class="nav-link" href="/admin/logout">Logout</a>
        </li>
      </ul>
    </div>

    <div class="users-frame">
      <div class="board">
        <div class="user-table">
          <span class="header-name" style="margin-bottom: 30px"
            >All Users List</span
          >
          <table class="table table-hover table-sm">
            <thead class="thead-light">
              <tr class="thead-light">
                <th scope="col">No</th>
                <th scope="col">Name</th>
                <th scope="col">Phone</th>
                <th scope="col">Status</th>
              </tr>
            </thead>
            <!--  LOOP PRODUCTS: START  -->
              <% users.map(function(value, index) { %>
                <tbody style="background: white">
                  <td><%= index+1 %></td>
                  <td><%= value.memberNick %></td>
                  <td><%= value.memberPhone %></td>
                  <td style="width: 13%">
                    <select class="spec-select member-status" id="<%= value._id %>">
                      <option value="ACTIVE" <%= value.memberStatus === 'ACTIVE' ? 'selected' : '' %> >ACTIVE</option>
                      <option value="BLOCK" <%= value.memberStatus === 'BLOCK' ? 'selected' : '' %> >BLOCK</option>
                      <option value="DELETE" <%= value.memberStatus === 'DELETE' ? 'selected' : '' %> >DELETE</option>
                    </select> 
                  </td>
                </tbody>
              <%  }) %>
            <!--  LOOP PRODUCTS: END  -->
          </table>
          <!-- Pagination will be inserted here by JavaScript -->
        </div>
      </div>
    </div>
    <% } %>
  </div>

  <script type="text/javascript" src="/js/users.js"></script>
  
  <!-- Add the pagination JavaScript code -->
  <% if(member) { %>
  <script>
    // Pagination configuration
    const ITEMS_PER_PAGE = 10; // Number of users per page
    let currentPage = 1;
    let totalPages = 1;

    document.addEventListener('DOMContentLoaded', function() {
      // Get all user rows and calculate total pages
      const userRows = document.querySelectorAll('.table tbody');
      totalPages = Math.ceil(userRows.length / ITEMS_PER_PAGE);
      
      // Only create pagination if we have more than one page
      if (totalPages > 1) {
        // Create pagination controls
        createPaginationControls();
        
        // Show the first page by default
        showPage(currentPage);
      }
    });

    // Function to create pagination controls
    function createPaginationControls() {
      // Create pagination container
      const paginationContainer = document.createElement('div');
      paginationContainer.className = 'pagination-container';
      paginationContainer.style.display = 'flex';
      paginationContainer.style.justifyContent = 'center';
      paginationContainer.style.margin = '20px 0';
      
      // Create previous button
      const prevButton = document.createElement('button');
      prevButton.className = 'btn btn-outline-primary pagination-btn';
      prevButton.innerHTML = 'Previous';
      prevButton.style.marginRight = '10px';
      prevButton.addEventListener('click', function() {
        if (currentPage > 1) {
          showPage(currentPage - 1);
        }
      });
      
      // Create page number buttons container
      const pageNumbersContainer = document.createElement('div');
      pageNumbersContainer.className = 'page-numbers';
      pageNumbersContainer.style.display = 'flex';
      
      // Create page number buttons
      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = 'btn btn-outline-primary page-btn';
        pageButton.innerHTML = i;
        pageButton.dataset.page = i;
        pageButton.style.margin = '0 5px';
        pageButton.addEventListener('click', function() {
          showPage(parseInt(this.dataset.page));
        });
        pageNumbersContainer.appendChild(pageButton);
      }
      
      // Create next button
      const nextButton = document.createElement('button');
      nextButton.className = 'btn btn-outline-primary pagination-btn';
      nextButton.innerHTML = 'Next';
      nextButton.style.marginLeft = '10px';
      nextButton.addEventListener('click', function() {
        if (currentPage < totalPages) {
          showPage(currentPage + 1);
        }
      });
      
      // Add all elements to pagination container
      paginationContainer.appendChild(prevButton);
      paginationContainer.appendChild(pageNumbersContainer);
      paginationContainer.appendChild(nextButton);
      
      // Add pagination container after the table
      const table = document.querySelector('.table');
      table.parentNode.insertBefore(paginationContainer, table.nextSibling);
    }

    // Function to show a specific page
    function showPage(pageNumber) {
      // Update current page
      currentPage = pageNumber;
      
      // Get all user rows
      const userRows = document.querySelectorAll('.table tbody');
      
      // Hide all rows
      userRows.forEach(row => {
        row.style.display = 'none';
      });
      
      // Calculate start and end index for current page
      const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
      const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, userRows.length);
      
      // Show rows for current page
      for (let i = startIndex; i < endIndex; i++) {
        userRows[i].style.display = 'table-row-group';
      }
      
      // Update active state of page buttons
      const pageButtons = document.querySelectorAll('.page-btn');
      pageButtons.forEach(button => {
        if (parseInt(button.dataset.page) === currentPage) {
          button.classList.remove('btn-outline-primary');
          button.classList.add('btn-primary');
        } else {
          button.classList.remove('btn-primary');
          button.classList.add('btn-outline-primary');
        }
      });
      
      // Update state of prev/next buttons
      const prevButton = document.querySelector('.pagination-btn:first-child');
      const nextButton = document.querySelector('.pagination-btn:last-child');
      
      prevButton.disabled = currentPage === 1;
      nextButton.disabled = currentPage === totalPages;
    }

    // Save current page in local storage when changing user status
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to all status dropdowns
      const statusDropdowns = document.querySelectorAll('.member-status');
      statusDropdowns.forEach(dropdown => {
        dropdown.addEventListener('change', function() {
          localStorage.setItem('currentUserPage', currentPage);
        });
      });
    });

    // Restore pagination state after page reload
    window.onload = function() {
      const savedPage = localStorage.getItem('currentUserPage');
      if (savedPage) {
        currentPage = parseInt(savedPage);
        localStorage.removeItem('currentUserPage');
        
        // Need to wait for DOM to be ready before applying saved page
        setTimeout(() => {
          if (typeof showPage === 'function') {
            showPage(currentPage);
          }
        }, 100);
      }
    };
  </script>
  
  <style>
    /* Pagination styles */
    .pagination-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 20px 0;
    }

    .pagination-btn {
      padding: 6px 12px;
      margin: 0 5px;
      cursor: pointer;
    }

    .pagination-btn:disabled {
      cursor: not-allowed;
      opacity: 0.6;
    }

    .page-btn {
      width: 40px;
      height: 40px;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .page-btn.btn-primary {
      color: white;
    }

    /* Responsive styles */
    @media screen and (max-width: 768px) {
      .page-numbers {
        display: none; /* Hide page numbers on mobile */
      }
      
      .pagination-container {
        justify-content: space-between;
      }
      
      .pagination-btn {
        margin: 0;
      }
    }
  </style>
  <% } %>
</body>

<%- include('includes/footer') %>